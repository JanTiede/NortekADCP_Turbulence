%% ************************************************************************
%***** Nortek Signature 1000 Processing - Step 2                      *****
%*****                                                                *****
%***** S2_Sig1000_Clean.m                                             *****
%*****                                                                *****
%***** A script to manually remove bad pings and airbins.             *****
%*****                                                                *****
%***** Input: .mat files generated by S1_Sig1000_Joinmat.m            *****
%***** Output: .mat files                                             *****
%*****                                                                *****
%***** Prepared by J. Tiede, Januar 2018                              *****
%**************************************************************************

%% Clean workspace
clc; clear; close all;

%% Add tools and functions to MATLAB path.
addpath('C:\Users\j_tie\OneDrive\LuFI\Projekte\LuggagePoint_JournalPaper\70_Matlab\ADCP\NortekSig1000\Functions')
addpath('C:\Users\j_tie\OneDrive\LuFI\Projekte\LuggagePoint_JournalPaper\70_Matlab\tools')

%% Define ADCP base folder.
basefolder = 'C:\Users\j_tie\OneDrive\LuFI\Projekte\LuggagePoint_JournalPaper\60_Data\Nortek_061117\'

%% Folder where files live.
DataFolder = [basefolder '03_Joined\'];
if ~isdir(DataFolder)
  errorMessage = sprintf('Error: Folder does not exist\n%s', DataFolder);
  uiwait(warndlg(errorMessage));
  return;
end

%% List Folders
ListFolders = dir(DataFolder);
ListFolders(1:2) = [];

%% Folder where files are saved to
savepath = [basefolder '04_Cleaned\'];

%% Loop over all files/folders
for p = 1 : length(ListFolders)
%% Define folder where .mat files live.
load([DataFolder,'\PNCU' num2str(p)]);
fprintf(1, 'Now reading PNCU%s.mat\n', num2str(p));

%% Removal of bins
% i = 26, % threshold for removal of bins
% ADCP.VelDirection(:,[1 i:end]) = []
% ADCP.Speed(:,[1 i:end]) = []
% ADCP.b1(:,[1 i:end]) = []
% ADCP.b2(:,[1 i:end]) = []
% ADCP.b3(:,[1 i:end]) = []
% ADCP.b4(:,[1 i:end]) = []
% ADCP.b5(:,[1 i:end]) = []
% ADCP.VelN(:,[1 i:end]) = []
% ADCP.VelE(:,[1 i:end]) = []
% ADCP.VelX(:,[1 i:end]) = []
% ADCP.VelY(:,[1 i:end]) = []
% ADCP.VelUp1(:,[1 i:end]) = []
% ADCP.VelUp2(:,[1 i:end]) = []
% ADCP.a1(:,[1 i:end]) = []
% ADCP.a2(:,[1 i:end]) = []
% ADCP.a3(:,[1 i:end]) = []
% ADCP.a4(:,[1 i:end]) = []
% ADCP.a5(:,[1 i:end]) = []
% ADCP.c1(:,[1 i:end]) = []
% ADCP.c2(:,[1 i:end]) = []
% ADCP.c3(:,[1 i:end]) = []
% ADCP.c4(:,[1 i:end]) = []
% ADCP.c5(:,[1 i:end]) = []
% ADCP.Range(:,[1 i:end]) = []

%% Removal of ensembles
% i = 737633:6124099; % threshold for removal of bins
% ADCP.VelDirection = ADCP.VelDirection(i,:)
% ADCP.Speed = ADCP.Speed(i,:)
% ADCP.b1 = ADCP.b1(i,:)
% ADCP.b2 = ADCP.b2(i,:)
% ADCP.b3 = ADCP.b3(i,:)
% ADCP.b4 = ADCP.b4(i,:)
% ADCP.b5 = ADCP.b5(i,:)
% % ADCP.VelN = ADCP.VelN(i,:)
% % ADCP.VelE = ADCP.VelE(i,:)
% ADCP.VelX = ADCP.VelX(i,:)
% ADCP.VelY = ADCP.VelY(i,:)
% ADCP.VelUp1 = ADCP.VelUp1(i,:)
% % ADCP.VelUp2 = ADCP.VelUp2(i,:)
% ADCP.a1 = ADCP.a1(i,:)
% ADCP.a2 = ADCP.a2(i,:)
% ADCP.a3 = ADCP.a3(i,:)
% ADCP.a4 = ADCP.a4(i,:)
% ADCP.a5 = ADCP.a5(i,:)
% ADCP.c1 = ADCP.c1(i,:)
% ADCP.c2 = ADCP.c2(i,:)
% ADCP.c3 = ADCP.c3(i,:)
% ADCP.c4 = ADCP.c4(i,:)
% ADCP.c5 = ADCP.c5(i,:)
% ADCP.Press = ADCP.Press(i,:)
% ADCP.Time = ADCP.Time(i,:)
% ADCP.phi1 = ADCP.phi1(i,:)
% ADCP.phi2 = ADCP.phi2(i,:)
% ADCP.phi3 = ADCP.phi3(i,:)
% ADCP.AmbVel = ADCP.AmbVel(i,:)
% ADCP.Temp = ADCP.Temp(i,:)
% ADCP.SoundV = ADCP.SoundV(i,:)
ADCP.Begin = datestr(ADCP.Time(1))
ADCP.End = datestr(ADCP.Time(end))

%% Save Raw Data
save([savepath 'PNCU' num2str(p) '_p.mat'],'ADCP','-v7.3');
fprintf(1, 'Now saving PNCU%s.mat\n.', num2str(p));

clear ADCP
end

fprintf(1, 'Done! Saved %s file(s).', num2str(p));