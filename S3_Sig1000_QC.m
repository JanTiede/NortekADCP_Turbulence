%% ************************************************************************
%***** Nortek Signature 1000 Processing - Step 3                      *****
%*****                                                                *****
%***** S3_Sig1000_QC.m                                                *****
%*****                                                                *****
%***** A script to to control quality of radial beam velocity         *****
%***** measurements. Default criteria for bad data are Correlation    *****
%***** < 50% and Amplitude < 30 counts. Bad Radial beam velocity      *****
%***** measurements as well as transformed true velocity vector       *****
%***** values with a bad component are replaced with NaN. Linear      *****
%***** interpolation over NaNs.                                       *****
%***** Furthermore airbins and measurement range contaminated by      *****
%***** sidelobe interference (Default: 15%) are removed.              *****
%*****                                                                *****
%***** Input: .mat files generated by S2_Sig1000_Clean.m              *****
%***** Output: .mat files of QCed data and percentage of bad data     *****
%*****         removed due to bad correlation and amplitude.          *****
%*****                                                                *****
%*****                                                                *****
%***** Prepared by J. Tiede, Januar 2018                              *****
%**************************************************************************

%% Clean workspace
clc; clear; close all;

%% Add tools and functions to MATLAB path.
addpath('C:\Users\j_tie\OneDrive\LuFI\Projekte\LuggagePoint_JournalPaper\70_Matlab\ADCP\NortekSig1000\Functions')
addpath('C:\Users\j_tie\OneDrive\LuFI\Projekte\LuggagePoint_JournalPaper\70_Matlab\tools')

%% Define ADCP base folder.
basefolder = 'C:\Users\j_tie\OneDrive\LuFI\Projekte\LuggagePoint_JournalPaper\60_Data\Nortek_061117\'

%% Folder where files live.
DataFolder = [basefolder '04_Cleaned\'];
if ~isdir(DataFolder)
  errorMessage = sprintf('Error: Folder does not exist\n%s', DataFolder);
  uiwait(warndlg(errorMessage));
  return;
end

%% List Folders
ListFolders = dir(DataFolder);
ListFolders(1:2) = [];

%% Folder where files are saved
savepath = [basefolder '05_QCed\'];

%% Specify quality criteria
Cor_tsd = 50;
Amp_tsd = 30;

%% Loop over all files/folders
for p = 1 : length(ListFolders)
%% Load .mat files 
load([DataFolder,'PNCU' num2str(p) '_p.mat'])
fprintf(1, 'Now reading PNCU%s_p.mat.\n', num2str(p));

%% Change correlation values to single
ADCP.c1 = single(ADCP.c1)
ADCP.c2 = single(ADCP.c2)
ADCP.c3 = single(ADCP.c3)
ADCP.c4 = single(ADCP.c4)
ADCP.c5 = single(ADCP.c5)

%% Remove bad data that falls below threshold
remc1 = ADCP.c1 < Cor_tsd;
ADCP.b1(remc1) = NaN;
ADCP.VelX(remc1) = NaN;
ADCP.VelY(remc1) = NaN;
ADCP.Speed(remc1) = NaN;
ADCP.VelDirection(remc1) = NaN;
ADCP.c1(remc1) = NaN;
ADCP.VelUp1(remc1) = NaN

remc2 = ADCP.c2 < Cor_tsd;
ADCP.b2(remc2) = NaN;
ADCP.VelX(remc2) = NaN;
ADCP.VelY(remc2) = NaN;
ADCP.Speed(remc2) = NaN;
ADCP.VelDirection(remc2) = NaN;
ADCP.c2(remc2) = NaN;
ADCP.VelUp1(remc2) = NaN

remc3 = ADCP.c3 < Cor_tsd;
ADCP.b3(remc3) = NaN;
ADCP.VelX(remc3) = NaN;
ADCP.VelY(remc3) = NaN;
ADCP.Speed(remc3) = NaN;
ADCP.VelDirection(remc3) = NaN;
ADCP.c3(remc3) = NaN;
ADCP.VelUp1(remc3) = NaN

remc4 = ADCP.c4 < Cor_tsd;
ADCP.b4(remc4) = NaN;
ADCP.VelX(remc4) = NaN;
ADCP.VelY(remc4) = NaN;
ADCP.Speed(remc4) = NaN;
ADCP.VelDirection(remc4) = NaN;
ADCP.c4(remc4) = NaN;
ADCP.VelUp1(remc4) = NaN

remc5 = ADCP.c5 < Cor_tsd;
ADCP.b5(remc5) = NaN;
ADCP.VelX(remc5) = NaN;
ADCP.VelY(remc5) = NaN;
ADCP.Speed(remc5) = NaN;
ADCP.VelDirection(remc5) = NaN;
ADCP.c5(remc5) = NaN;
ADCP.VelUp1(remc5) = NaN

rema1 = ADCP.a1 < Amp_tsd;
ADCP.b1(rema1) = NaN;
ADCP.VelX(rema1) = NaN;
ADCP.VelY(rema1) = NaN;
ADCP.Speed(rema1) = NaN;
ADCP.VelDirection(rema1) = NaN;
ADCP.a1(rema1) = NaN;
ADCP.VelUp1(rema1) = NaN

rema2 = ADCP.a2 < Amp_tsd;
ADCP.b2(rema2) = NaN;
ADCP.VelX(rema2) = NaN;
ADCP.VelY(rema2) = NaN;
ADCP.Speed(rema2) = NaN;
ADCP.VelDirection(rema2) = NaN;
ADCP.a2(rema2) = NaN;
ADCP.VelUp1(rema2) = NaN

rema3 = ADCP.a3 < Amp_tsd;
ADCP.b3(rema3) = NaN;
ADCP.VelX(rema3) = NaN;
ADCP.VelY(rema3) = NaN;
ADCP.Speed(rema3) = NaN;
ADCP.VelDirection(rema3) = NaN;
ADCP.a3(rema3) = NaN;
ADCP.VelUp1(rema3) = NaN

rema4 = ADCP.a4 < Amp_tsd;
ADCP.b4(rema4) = NaN;
ADCP.VelX(rema4) = NaN;
ADCP.VelY(rema4) = NaN;
ADCP.Speed(rema4) = NaN;
ADCP.VelDirection(rema4) = NaN;
ADCP.a4(rema4) = NaN;
ADCP.VelUp1(rema4) = NaN

rema5 = ADCP.a5 < Amp_tsd;
ADCP.b5(rema5) = NaN;
ADCP.VelX(rema5) = NaN;
ADCP.VelY(rema5) = NaN;
ADCP.Speed(rema5) = NaN;
ADCP.VelDirection(rema5) = NaN;
ADCP.a5(rema5) = NaN;
ADCP.VelUp1(rema5) = NaN

%% Calculate amount of removed data.
cremoved = sum(sum(remc1))+sum(sum(remc2))+sum(sum(remc3))+sum(sum(remc4))+sum(sum(remc5));
data = 5*size(ADCP.b1,1)*size(ADCP.b1,2);
percbad.c = cremoved/data;
aremoved = sum(sum(rema1))+sum(sum(rema2))+sum(sum(rema3))+sum(sum(rema4))+sum(sum(rema5));
percbad.a = aremoved/data;

%% Simple 1D interpolation over Nans
for i = 1:size(ADCP.b1,2)
ADCP.b1(:,i) = avinterpnan(ADCP.b1(:,i));
end
for i = 1:size(ADCP.b2,2)
ADCP.b2(:,i) = avinterpnan(ADCP.b2(:,i));
end
for i = 1:size(ADCP.b3,2)
ADCP.b3(:,i) = avinterpnan(ADCP.b3(:,i));
end
for i = 1:size(ADCP.b4,2)
ADCP.b4(:,i) = avinterpnan(ADCP.b4(:,i));
end
for i = 1:size(ADCP.b5,2)
ADCP.b5(:,i) = avinterpnan(ADCP.b5(:,i));
end
for i = 1:size(ADCP.VelX,2)
ADCP.VelX(:,i) = avinterpnan(ADCP.VelX(:,i));
end
for i = 1:size(ADCP.VelY,2)
ADCP.VelY(:,i) = avinterpnan(ADCP.VelY(:,i));
end
for i = 1:size(ADCP.Speed,2)
ADCP.Speed(:,i) = avinterpnan(ADCP.Speed(:,i));
end
for i = 1:size(ADCP.VelDirection,2)
ADCP.VelDirection(:,i) = avinterpnan(ADCP.VelDirection(:,i));
end

%% Remove bins above water surface + sidelobe interference
remsurf = ADCP.Range > ADCP.Press-0.2*ADCP.Range(end);
ADCP.b1(remsurf) = NaN;
ADCP.b2(remsurf) = NaN;
ADCP.b3(remsurf) = NaN;
ADCP.b4(remsurf) = NaN;
ADCP.b5(remsurf) = NaN;
ADCP.VelX(remsurf) = NaN;
ADCP.VelY(remsurf) = NaN;
ADCP.VelUp1(remsurf) = NaN
ADCP.Speed(remsurf) = NaN;
ADCP.VelDirection(remsurf) = NaN;
ADCP.c1(remsurf) = NaN;
ADCP.c2(remsurf) = NaN;
ADCP.c3(remsurf) = NaN;
ADCP.c4(remsurf) = NaN;
ADCP.c5(remsurf) = NaN;
ADCP.a1(remsurf) = NaN;
ADCP.a2(remsurf) = NaN;
ADCP.a3(remsurf) = NaN;
ADCP.a4(remsurf) = NaN;
ADCP.a5(remsurf) = NaN;

%% Estimate noise
b1var = sqrt(var(ADCP.b1));
b5var = sqrt(var(ADCP.b5));
%% Save .mat files.
save([savepath 'PNCU' num2str(p) '_p_qc.mat'],'ADCP','-v7.3')
save([savepath 'PNCUp_perremoved_' num2str(p) '.mat'],'percbad','-v7.3')
fprintf(1, 'Now saving PNCU%s_p.mat.\n', num2str(p));

%% Clear
clear ADCP remc1 remc2 remc3 remc4 remc5 rema1 rema2 rema3 rema4 rema5 percbad

end

fprintf(1, 'Done! Saved %s file(s).', num2str(p));